<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# var count = 8; #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable MA0042 // Do not use blocking call

using System;
using System.Threading.Tasks;

namespace Meziantou.Framework
{
    public static partial class TaskExtensions
    {
<# for (int i = 2; i < count; i++) { #>
        public static async Task<(<#= GetTemplateString(i) #>)> WhenAll<<#= GetTemplateString(i) #>>(<#= GetTypedArgsString(i, "task") #>)
        {
<# for (int j = 0; j < i; j++) { #>
            if (task<#= j #> is null) throw new ArgumentNullException(nameof(task<#= j #>));
<# } #>

            await Task.WhenAll(<#= GetArgsString(i, "task") #>).ConfigureAwait(false);
            return (<#= GetArgsResultString(i, "task") #>);
        }
<# } #>
    }
}
<#+
    string GetTemplateString(int count)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += "T" + i;
        }
        return str;
    }
    
    string GetArgsString(int count, string name)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += name + i;
        }
        return str;
    }
        
    string GetArgsResultString(int count, string name)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += name + i + ".Result";
        }
        return str;
    }
    
    string GetTypedArgsString(int count, string name)
    {
        if (count == 0)
            return "";

        var str = "";
        for (var i = 0; i < count; i++)
        {
            if (i > 0)
            {
                str += ", ";
            }

            str += "Task<T" + i + "> " + name + i;
        }
        return str;
    }
#>